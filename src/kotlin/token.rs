// https://github.com/cout970/kotlin-interpreter-rs

#[derive(Debug, Clone, PartialEq)]
pub enum Token {
    Id(String),
    Number(Number),
    Char(char),
    StringStart,
    StringEnd,
    StringTemplateStart,
    StringTemplateEnd,
    StringContent(String),
    StringVariable(String),
    // Signs
    Semicolon,
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftBracket,
    RightBracket,
    LeftAngleBracket,
    RightAngleBracket,
    LessEquals,
    GreaterEquals,
    At,
    Colon,
    DoubleColon,
    Dollar,
    Dot,
    DoubleDot,
    Comma,
    QuestionMark,
    ExclamationMark,
    DoubleExclamationMark,
    NotEquals,
    NotDoubleEquals,
    RightArrow,
    Elvis,
    Plus,
    DoublePlus,
    Minus,
    DoubleMinus,
    Asterisk,
    Slash,
    Percent,
    Equals,
    DoubleEquals,
    TripleEquals,
    PlusEquals,
    MinusEquals,
    TimesEquals,
    DivEquals,
    ModEquals,
    Ampersand,
    DoubleAmpersand,
    Pipe,
    DoublePipe,
    Underscore,
    // Keywords
    As,
    AsQuestionMark,
    Break,
    Class,
    Continue,
    Do,
    Else,
    False,
    For,
    Fun,
    If,
    In,
    NotIn,
    Is,
    NotIs,
    Interface,
    Null,
    Object,
    Package,
    Return,
    Super,
    This,
    Throw,
    True,
    Try,
    TypeAlias,
    Val,
    Var,
    When,
    While,
    // End of file
    EOF,
}

#[derive(Clone, PartialEq, Debug)]
pub enum Number {
    Double(f64),
    Float(f32),
    Byte(i8),
    Short(i16),
    Int(i32),
    Long(i64),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum KotlinTokenClass {
    Id,
    Number,
    Char,
    StringStart,
    StringEnd,
    StringTemplateStart,
    StringTemplateEnd,
    StringContent,
    StringVariable,
    // Signs
    Semicolon,
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftBracket,
    RightBracket,
    LeftAngleBracket,
    RightAngleBracket,
    LessEquals,
    GreaterEquals,
    At,
    Colon,
    DoubleColon,
    Dollar,
    Dot,
    DoubleDot,
    Comma,
    QuestionMark,
    ExclamationMark,
    DoubleExclamationMark,
    NotEquals,
    NotDoubleEquals,
    RightArrow,
    Elvis,
    Plus,
    DoublePlus,
    Minus,
    DoubleMinus,
    Asterisk,
    Slash,
    Percent,
    Equals,
    DoubleEquals,
    TripleEquals,
    PlusEquals,
    MinusEquals,
    TimesEquals,
    DivEquals,
    ModEquals,
    Ampersand,
    DoubleAmpersand,
    Pipe,
    DoublePipe,
    Underscore,
    // Keywords
    As,
    AsQuestionMark,
    Break,
    Class,
    Continue,
    Do,
    Else,
    False,
    For,
    Fun,
    If,
    In,
    NotIn,
    Is,
    NotIs,
    Interface,
    Null,
    Object,
    Package,
    Return,
    Super,
    This,
    Throw,
    True,
    Try,
    TypeAlias,
    Val,
    Var,
    When,
    While,
    // End of file
    EOF,
}

impl crate::parser3::TokenClass for Token {
    type Result = KotlinTokenClass;

    fn token_class(&self) -> Self::Result {
        match self {
            Token::Id(_) => KotlinTokenClass::Id,
            Token::Number(_) => KotlinTokenClass::Number,
            Token::Char(_) => KotlinTokenClass::Char,
            Token::StringStart => KotlinTokenClass::StringStart,
            Token::StringEnd => KotlinTokenClass::StringEnd,
            Token::StringTemplateStart => KotlinTokenClass::StringTemplateStart,
            Token::StringTemplateEnd => KotlinTokenClass::StringTemplateEnd,
            Token::StringContent(_) => KotlinTokenClass::StringContent,
            Token::StringVariable(_) => KotlinTokenClass::StringVariable,
            Token::Semicolon => KotlinTokenClass::Semicolon,
            Token::LeftParen => KotlinTokenClass::LeftParen,
            Token::RightParen => KotlinTokenClass::RightParen,
            Token::LeftBrace => KotlinTokenClass::LeftBrace,
            Token::RightBrace => KotlinTokenClass::RightBrace,
            Token::LeftBracket => KotlinTokenClass::LeftBracket,
            Token::RightBracket => KotlinTokenClass::RightBracket,
            Token::LeftAngleBracket => KotlinTokenClass::LeftAngleBracket,
            Token::RightAngleBracket => KotlinTokenClass::RightAngleBracket,
            Token::LessEquals => KotlinTokenClass::LessEquals,
            Token::GreaterEquals => KotlinTokenClass::GreaterEquals,
            Token::At => KotlinTokenClass::At,
            Token::Colon => KotlinTokenClass::Colon,
            Token::DoubleColon => KotlinTokenClass::DoubleColon,
            Token::Dollar => KotlinTokenClass::Dollar,
            Token::Dot => KotlinTokenClass::Dot,
            Token::DoubleDot => KotlinTokenClass::DoubleDot,
            Token::Comma => KotlinTokenClass::Comma,
            Token::QuestionMark => KotlinTokenClass::QuestionMark,
            Token::ExclamationMark => KotlinTokenClass::ExclamationMark,
            Token::DoubleExclamationMark => KotlinTokenClass::DoubleExclamationMark,
            Token::NotEquals => KotlinTokenClass::NotEquals,
            Token::NotDoubleEquals => KotlinTokenClass::NotDoubleEquals,
            Token::RightArrow => KotlinTokenClass::RightArrow,
            Token::Elvis => KotlinTokenClass::Elvis,
            Token::Plus => KotlinTokenClass::Plus,
            Token::DoublePlus => KotlinTokenClass::DoublePlus,
            Token::Minus => KotlinTokenClass::Minus,
            Token::DoubleMinus => KotlinTokenClass::DoubleMinus,
            Token::Asterisk => KotlinTokenClass::Asterisk,
            Token::Slash => KotlinTokenClass::Slash,
            Token::Percent => KotlinTokenClass::Percent,
            Token::Equals => KotlinTokenClass::Equals,
            Token::DoubleEquals => KotlinTokenClass::DoubleEquals,
            Token::TripleEquals => KotlinTokenClass::TripleEquals,
            Token::PlusEquals => KotlinTokenClass::PlusEquals,
            Token::MinusEquals => KotlinTokenClass::MinusEquals,
            Token::TimesEquals => KotlinTokenClass::TimesEquals,
            Token::DivEquals => KotlinTokenClass::DivEquals,
            Token::ModEquals => KotlinTokenClass::ModEquals,
            Token::Ampersand => KotlinTokenClass::Ampersand,
            Token::DoubleAmpersand => KotlinTokenClass::DoubleAmpersand,
            Token::Pipe => KotlinTokenClass::Pipe,
            Token::DoublePipe => KotlinTokenClass::DoublePipe,
            Token::Underscore => KotlinTokenClass::Underscore,
            Token::As => KotlinTokenClass::As,
            Token::AsQuestionMark => KotlinTokenClass::AsQuestionMark,
            Token::Break => KotlinTokenClass::Break,
            Token::Class => KotlinTokenClass::Class,
            Token::Continue => KotlinTokenClass::Continue,
            Token::Do => KotlinTokenClass::Do,
            Token::Else => KotlinTokenClass::Else,
            Token::False => KotlinTokenClass::False,
            Token::For => KotlinTokenClass::For,
            Token::Fun => KotlinTokenClass::Fun,
            Token::If => KotlinTokenClass::If,
            Token::In => KotlinTokenClass::In,
            Token::NotIn => KotlinTokenClass::NotIn,
            Token::Is => KotlinTokenClass::Is,
            Token::NotIs => KotlinTokenClass::NotIs,
            Token::Interface => KotlinTokenClass::Interface,
            Token::Null => KotlinTokenClass::Null,
            Token::Object => KotlinTokenClass::Object,
            Token::Package => KotlinTokenClass::Package,
            Token::Return => KotlinTokenClass::Return,
            Token::Super => KotlinTokenClass::Super,
            Token::This => KotlinTokenClass::This,
            Token::Throw => KotlinTokenClass::Throw,
            Token::True => KotlinTokenClass::True,
            Token::Try => KotlinTokenClass::Try,
            Token::TypeAlias => KotlinTokenClass::TypeAlias,
            Token::Val => KotlinTokenClass::Val,
            Token::Var => KotlinTokenClass::Var,
            Token::When => KotlinTokenClass::When,
            Token::While => KotlinTokenClass::While,
            Token::EOF => KotlinTokenClass::EOF,
        }
    }
}
